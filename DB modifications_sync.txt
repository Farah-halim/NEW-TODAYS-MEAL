ALTER TABLE orders
DROP COLUMN delivery_zone;

ALTER TABLE external_user
ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN last_login TIMESTAMP NULL;

CREATE TABLE zones (
    zone_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

-- Insert zones if they don't exist
INSERT IGNORE INTO zones (zone_id, name) VALUES 
(1, 'New Cairo'),
(2, '6th of October');

CREATE TABLE admin_actions (
    action_id INT PRIMARY KEY,
    admin_id INT REFERENCES users(user_id),
    action_type TEXT, -- e.g., 'CREATE_ZONE'
    action_target TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE customized_order MODIFY preferred_completion_date DATETIME NOT NULL;

ALTER TABLE customized_order
ADD COLUMN customer_approval ENUM('approved', 'rejected', 'pending') DEFAULT 'pending'

ALTER TABLE external_user
ADD COLUMN zone_id INT NOT NULL;

ALTER TABLE orders
ADD customer_selected_date DATE NULL;

-- Foreign Key 
ALTER TABLE external_user
ADD CONSTRAINT fk_external_user_zone FOREIGN KEY (zone_id) REFERENCES zones(zone_id)
ON DELETE CASCADE ON UPDATE CASCADE

CREATE TABLE IF NOT EXISTS `kitchen_documents` (
  `doc_id` int(11) NOT NULL AUTO_INCREMENT,
  `kitchen_id` int(11) NOT NULL,
  `document_type` enum('national_id','business_license','health_certificate','tax_certificate','kitchen_photos','other') NOT NULL,
  `document_name` varchar(255)NOT NULL,
  `file_path` varchar(500) NOT NULL,
  `file_size` int(11) DEFAULT NULL,
  `file_type` varchar(100) DEFAULT NULL,
  `upload_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('pending','approved','rejected') DEFAULT 'pending',
  `admin_notes` text DEFAULT NULL,
  `reviewed_by` int(11) DEFAULT NULL,
  `reviewed_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`doc_id`),
  KEY `kitchen_id` (`kitchen_id`),
  KEY `reviewed_by` (`reviewed_by`),
  CONSTRAINT `kitchen_documents_ibfk_1` FOREIGN KEY (`kitchen_id`) REFERENCES `cloud_kitchen_owner` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `kitchen_documents_ibfk_2` FOREIGN KEY (`reviewed_by`) REFERENCES `admin` (`user_id`) ON DELETE SET NULL


ALTER TABLE meals ADD COLUMN visible BOOLEAN DEFAULT TRUE;

CREATE TABLE meal_dietary_tag (
    meal_id INT NOT NULL,
    tag_id INT NOT NULL,
    PRIMARY KEY (meal_id, tag_id),
    FOREIGN KEY (meal_id) REFERENCES meals(meal_id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES dietary_tags(tag_id) ON DELETE CASCADE
);

ALTER TABLE order_packages 
ADD package_status ENUM('pending', 'preparing', 'ready_for_pickup', 'in_transit', 'delivered', 'cancelled') 
DEFAULT 'pending';


ALTER TABLE order_packages
ADD payment_status ENUM('pending', 'paid', 'failed') DEFAULT 'pending';


ALTER TABLE payment_details
ADD COLUMN payment_status ENUM('pending', 'paid', 'failed') DEFAULT 'pending';

ALTER TABLE orders 
DROP COLUMN kitchen_order_status,
DROP COLUMN order_status;

ALTER TABLE orders 
ADD COLUMN order_status ENUM(
    'pending', 
    'preparing', 
    'ready_for_pickup', 
    'in_transit', 
    'delivered', 
    'cancelled'
) DEFAULT 'pending';


ALTER TABLE external_user
ADD FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE cloud_kitchen_owner
ADD FOREIGN KEY (user_id) REFERENCES external_user(user_id) ON DELETE CASCADE;

ALTER TABLE meals
ADD FOREIGN KEY (cloud_kitchen_id) REFERENCES cloud_kitchen_owner(user_id) ON DELETE CASCADE;

--For Suspension
ALTER TABLE `cloud_kitchen_owner` ADD COLUMN `suspension_reason` TEXT NULL DEFAULT NULL;
ALTER TABLE `cloud_kitchen_owner` ADD COLUMN `suspended_by` INT(11) NULL DEFAULT NULL;
ALTER TABLE `cloud_kitchen_owner` ADD COLUMN `suspension_date` TIMESTAMP NULL DEFAULT NULL;

-- Add foreign key for suspended_by
ALTER TABLE `cloud_kitchen_owner` ADD CONSTRAINT `fk_suspended_by` 
FOREIGN KEY (`suspended_by`) REFERENCES `users` (`user_id`) ON DELETE SET NULL;

ALTER TABLE cloud_kitchen_owner
DROP COLUMN address;

CREATE TABLE cart (
    cart_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    cloud_kitchen_id INT NOT NULL,  
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customer(user_id),
    FOREIGN KEY (cloud_kitchen_id) REFERENCES cloud_kitchen_owner(user_id)
);

CREATE TABLE cart_items (
    cart_item_id INT PRIMARY KEY AUTO_INCREMENT,
    cart_id INT NOT NULL,
    meal_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cart_id) REFERENCES cart(cart_id),
    FOREIGN KEY (meal_id) REFERENCES meals(meal_id)
);

Alter table cloud_kitchen_owner
Add constraint foreign key(speciality_id) references category(cat_id) on delete cascade


-- Financial Settlements Table Migration
-- This table tracks settlement statuses for accounts receivable and payable

CREATE TABLE `financial_settlements` (
  `settlement_id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) NOT NULL,
  `settlement_type` enum('delivery_receivable','delivery_payable','kitchen_payable') NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `settlement_status` enum('pending','settled','partially_settled') DEFAULT 'pending',
  `settlement_date` timestamp NULL DEFAULT NULL,
  `settlement_reference` varchar(100) DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`settlement_id`),
  KEY `order_id` (`order_id`),
  KEY `settlement_type` (`settlement_type`),
  KEY `settlement_status` (`settlement_status`),
  FOREIGN KEY (`order_id`) REFERENCES `orders` (`order_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Add indexes for better performance
CREATE INDEX `idx_settlement_type_status` ON `financial_settlements` (`settlement_type`, `settlement_status`);
CREATE INDEX `idx_settlement_date` ON `financial_settlements` (`settlement_date`);

-- Insert initial settlement records for existing orders
INSERT INTO `financial_settlements` (`order_id`, `settlement_type`, `amount`, `settlement_status`, `created_at`)
SELECT 
    o.order_id,
    CASE 
        WHEN pd.p_method = 'cash' THEN 'delivery_receivable'
        WHEN pd.p_method = 'visa' THEN 'delivery_payable'
    END as settlement_type,
    CASE 
        WHEN pd.p_method = 'cash' THEN (pd.total_ord_price + (pd.delivery_fees * 0.1))  
-- Food amount + 10% of delivery fees
        WHEN pd.p_method = 'visa' THEN pd.delivery_fees  -- Delivery fees owed for online orders
    END as amount,
    'pending' as settlement_status,
    o.order_date as created_at
FROM orders o
JOIN payment_details pd ON o.order_id = pd.order_id
WHERE pd.p_method IN ('cash', 'visa');

-- Insert kitchen payable records for all orders (85% of order amount)
INSERT INTO `financial_settlements` (`order_id`, `settlement_type`, `amount`, `settlement_status`, `created_at`)
SELECT 
    o.order_id,
    'kitchen_payable' as settlement_type,
    (pd.total_ord_price * 0.85) as amount,  -- Kitchen gets 85%, platform keeps 15% commission
    'pending' as settlement_status,
    o.order_date as created_at
FROM orders o
JOIN payment_details pd ON o.order_id = pd.order_id; 

DROP TABLE payment_details;

CREATE TABLE payment_details (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    total_ord_price DECIMAL(10,2) NOT NULL,
    delivery_fees DECIMAL(10,2) NOT NULL,
    website_revenue DECIMAL(10,2) NOT NULL,
    total_payment DECIMAL(10,2) NOT NULL,
    p_date_time DATETIME NOT NULL,
    p_method ENUM('cash', 'visa') NOT NULL,
    payment_status ENUM('pending', 'paid', 'failed') DEFAULT 'pending',
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

DELIMITER //
CREATE TRIGGER before_payment_details_insert
BEFORE INSERT ON payment_details
FOR EACH ROW
BEGIN
    SET NEW.website_revenue = NEW.total_ord_price * 0.15;
    SET NEW.total_payment = NEW.total_ord_price + NEW.delivery_fees;
END//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_payment_details_update
BEFORE UPDATE ON payment_details
FOR EACH ROW
BEGIN
    SET NEW.website_revenue = NEW.total_ord_price * 0.15;
    SET NEW.total_payment = NEW.total_ord_price + NEW.delivery_fees;
END//
DELIMITER ;

-- weak relationship constraints
ALTER TABLE sub_category 
ADD CONSTRAINT fk_subcategory_cascade 
FOREIGN KEY (parent_cat_id) REFERENCES category(cat_id) 
ON DELETE CASCADE;

-- ensuring subcategory names are unique within each category
ALTER TABLE sub_category 
ADD CONSTRAINT unique_subcat_per_category 
UNIQUE(parent_cat_id, subcat_name);

